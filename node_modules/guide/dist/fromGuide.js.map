{"version":3,"sources":["../src/fromGuide.js"],"names":["fromGuide","initializationVectorValue","expectedNamespace","expectedResourceTypeName","guide","decodedGuide","Buffer","tag","slice","body","decipher","createDecipher","setAuthTag","payload","decryptedGuide","update","toString","final","JSON","parse","error","namespace","type","id"],"mappings":";;;;;;AAEA;;;;AACA;;AAGA;;;;AASA;;;;;;;oBAfA;;AAoBA,IAAMA,gCAA2B,SAA3BA,SAA2B,CAACC,yBAAD,EAA4BC,iBAA5B,EAA+CC,wBAA/C,EAAyEC,KAAzE,EAAmF;AAClH,MAAMC,eAAe,IAAIC,MAAJ,CAAW,yBAAeF,KAAf,CAAX,EAAkC,QAAlC,CAArB;;AAEA,MAAMG,MAAMF,aAAaG,KAAb,CAAmB,CAAnB,EAAsB,EAAtB,CAAZ;AACA,MAAMC,oBAAeJ,aAAaG,KAAb,CAAmB,EAAnB,CAArB;;AAEA,MAAME,WAAW,iBAAOC,cAAP,CAAsB,aAAtB,EAAqCV,yBAArC,CAAjB;;AAEAS,WAASE,UAAT,CAAoBL,GAApB;;AAEA,MAAIM,gBAAJ;;AAEA,MAAI;AACF,QAAMC,iBAAiBJ,SAASK,MAAT,CAAgBN,IAAhB,EAAsBO,QAAtB,KAAmCN,SAASO,KAAT,GAAiBD,QAAjB,EAA1D;;AAEAH,cAAUK,KAAKC,KAAL,CAAWL,cAAX,CAAV;AACD,GAJD,CAIE,OAAOM,KAAP,EAAc;AACd;AACA,UAAM,8BAAsBhB,KAAtB,CAAN;AACD;;AAED,MAAIF,sBAAsBW,QAAQQ,SAAlC,EAA6C;AAC3C,UAAM,0CAAkCjB,KAAlC,EAAyCF,iBAAzC,EAA4DC,wBAA5D,EAAsFU,OAAtF,CAAN;AACD;;AAED,MAAIV,6BAA6BU,QAAQS,IAAzC,EAA+C;AAC7C,UAAM,iDAAyClB,KAAzC,EAAgDF,iBAAhD,EAAmEC,wBAAnE,EAA6FU,OAA7F,CAAN;AACD;;AAED,SAAO;AACLU,QAAIV,QAAQU,EADP;AAELF,eAAWR,QAAQQ,SAFd;AAGLC,UAAMT,QAAQS;AAHT,GAAP;AAKD,CAlCD;;kBAoCetB,S","file":"fromGuide.js","sourcesContent":["// @flow\n\nimport crypto from 'crypto';\nimport {\n  unescape as base64Unescape\n} from 'base64-url';\nimport {\n  InvalidGuideError,\n  UnexpectedNamespaceValueError,\n  UnexpectedResourceTypeNameValueError\n} from './errors';\nimport type {\n  FromGuideType\n} from './types';\n\n/**\n * @throws InvalidGuideError Throws if input guide cannot be decrypted.\n * @throws UnexpectedNamespaceValueError Throws if the namespace contained in the payload does not match the expected namespace.\n * @throws UnexpectedResourceTypeNameValueError Throws if the resource type name contained in the payload does not match the expected resource type name.\n */\nconst fromGuide: FromGuideType = (initializationVectorValue, expectedNamespace, expectedResourceTypeName, guide) => {\n  const decodedGuide = new Buffer(base64Unescape(guide), 'base64');\n\n  const tag = decodedGuide.slice(0, 16);\n  const body: Buffer = decodedGuide.slice(16);\n\n  const decipher = crypto.createDecipher('aes-256-gcm', initializationVectorValue);\n\n  decipher.setAuthTag(tag);\n\n  let payload;\n\n  try {\n    const decryptedGuide = decipher.update(body).toString() + decipher.final().toString();\n\n    payload = JSON.parse(decryptedGuide);\n  } catch (error) {\n    // console.log('error', error);\n    throw new InvalidGuideError(guide);\n  }\n\n  if (expectedNamespace !== payload.namespace) {\n    throw new UnexpectedNamespaceValueError(guide, expectedNamespace, expectedResourceTypeName, payload);\n  }\n\n  if (expectedResourceTypeName !== payload.type) {\n    throw new UnexpectedResourceTypeNameValueError(guide, expectedNamespace, expectedResourceTypeName, payload);\n  }\n\n  return {\n    id: payload.id,\n    namespace: payload.namespace,\n    type: payload.type\n  };\n};\n\nexport default fromGuide;\n"]}